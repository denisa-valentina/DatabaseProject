 -- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2024-12-08 13:27:35 EET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE bill (
    reservation_id NUMBER(6) NOT NULL,
    total_price    NUMBER(5),
    payment_date   DATE,
    payment_method VARCHAR2(10) NOT NULL,
    card_number    NUMBER(16),
    employee_id    NUMBER(3) NOT NULL,
    client_id      NUMBER(5) NOT NULL,
    room_id        NUMBER(4) NOT NULL
)
LOGGING;

ALTER TABLE bill ADD CONSTRAINT bill_total_price_ck CHECK ( total_price >= 0 );

ALTER TABLE bill
    ADD CONSTRAINT bill_payment_method_ck CHECK ( payment_method IN ( 'card', 'numerar' ) );

CREATE UNIQUE INDEX bill__idx ON
    bill (
        reservation_id
    ASC,
        client_id
    ASC,
        room_id
    ASC )
        LOGGING;

ALTER TABLE bill
    ADD CONSTRAINT bill_pk PRIMARY KEY ( employee_id,
                                         reservation_id,
                                         client_id,
                                         room_id );

CREATE TABLE booking (
    reservation_id   NUMBER(6) NOT NULL,
    check_in_date    DATE NOT NULL,
    check_out_date   DATE NOT NULL,
    room_total_price NUMBER(5),
    services_price   NUMBER(5),
    status           VARCHAR2(10),
    reservation_date DATE DEFAULT sysdate,
    client_id        NUMBER(5) NOT NULL,
    room_id          NUMBER(4) NOT NULL
)
LOGGING;

ALTER TABLE booking ADD CONSTRAINT booking_room_total_price_ck CHECK ( room_total_price > 0 );

ALTER TABLE booking ADD CONSTRAINT booking_services_price_ck CHECK ( services_price >= 0 );

ALTER TABLE booking
    ADD CHECK ( status IN ( 'anulata', 'derulare', 'onorata' ) );

ALTER TABLE booking
    ADD CONSTRAINT booking_pk PRIMARY KEY ( reservation_id,
                                            client_id,
                                            room_id );

CREATE TABLE booking_service_fk (
    reservation_id NUMBER(6) NOT NULL,
    client_id      NUMBER(5) NOT NULL,
    room_id        NUMBER(4) NOT NULL,
    service_id     NUMBER(2) NOT NULL
)
LOGGING;

ALTER TABLE booking_service_fk
    ADD CONSTRAINT booking_service_fk_pk PRIMARY KEY ( reservation_id,
                                                       client_id,
                                                       room_id,
                                                       service_id );

CREATE TABLE client (
    client_id    NUMBER(5) NOT NULL,
    name         VARCHAR2(40) NOT NULL,
    birth_date   DATE,
    phone_number VARCHAR2(10) NOT NULL,
    email        VARCHAR2(25)
)
LOGGING;

ALTER TABLE client
    ADD CONSTRAINT client_name_ck CHECK ( REGEXP_LIKE ( name,
                                                        '([A-Z]+[a-z]+)( [A-Z]+[a-z]+)*' ) );

ALTER TABLE client
    ADD CONSTRAINT client_phone_number_ck CHECK ( REGEXP_LIKE ( phone_number,
                                                                '^07[0-9]{8}$' ) );

ALTER TABLE client
    ADD CONSTRAINT client_email_ck CHECK ( REGEXP_LIKE ( email,
                                                         '[a-z0-9._%-]+@[a-z0-9._%-]+\.[a-z]{2,4}' ) );

ALTER TABLE client ADD CONSTRAINT client_pk PRIMARY KEY ( client_id );

ALTER TABLE client ADD CONSTRAINT client_uk UNIQUE ( email,
                                                     phone_number );

CREATE TABLE employee (
    employee_id  NUMBER(3) NOT NULL,
    name         VARCHAR2(40) NOT NULL,
    phone_number VARCHAR2(10) NOT NULL,
    job          VARCHAR2(15) NOT NULL,
    hire_date    DATE NOT NULL,
    salary       NUMBER(5) NOT NULL
)
LOGGING;

ALTER TABLE employee
    ADD CONSTRAINT employee_name_ck CHECK ( REGEXP_LIKE ( name,
                                                          '([A-Z]+[a-z]+)( [A-Z]+[a-z]+)*' ) );

ALTER TABLE employee
    ADD CONSTRAINT employee_phone_number_ck CHECK ( REGEXP_LIKE ( phone_number,
                                                                  '^07[0-9]{8}$' ) );

ALTER TABLE employee
    ADD CONSTRAINT employee_job_ck CHECK ( job IN ( 'chelner', 'instalator', 'manager', 'menajer', 'receptie' ) );

ALTER TABLE employee ADD CONSTRAINT employee_salary_ck CHECK ( salary > 0 );

ALTER TABLE employee ADD CONSTRAINT employee_pk PRIMARY KEY ( employee_id );

ALTER TABLE employee ADD CONSTRAINT employee_uk UNIQUE ( phone_number );

CREATE TABLE room (
    room_id     NUMBER(4) NOT NULL,
    room_number NUMBER(4) NOT NULL,
    floor       NUMBER(2) NOT NULL,
    capacity    NUMBER(1) NOT NULL,
    price       NUMBER(4) NOT NULL
)
LOGGING;

ALTER TABLE room
    ADD CONSTRAINT room_room_number_ck CHECK ( room_number BETWEEN 101 AND 110
                                               OR room_number BETWEEN 201 AND 210
                                               OR room_number BETWEEN 301 AND 310
                                               OR room_number BETWEEN 401 AND 410
                                               OR room_number BETWEEN 501 AND 510
                                               OR room_number BETWEEN 601 AND 610
                                               OR room_number BETWEEN 701 AND 710
                                               OR room_number BETWEEN 801 AND 810
                                               OR room_number BETWEEN 901 AND 910
                                               OR room_number BETWEEN 1001 AND 1010 );

ALTER TABLE room
    ADD CONSTRAINT room_floor_ck CHECK ( floor BETWEEN 1 AND 10 );

ALTER TABLE room
    ADD CONSTRAINT room_capacity_ck CHECK ( capacity BETWEEN 1 AND 5 );

ALTER TABLE room ADD CONSTRAINT room_price_ck CHECK ( price > 0 );

ALTER TABLE room ADD CONSTRAINT room_pk PRIMARY KEY ( room_id );

ALTER TABLE room ADD CONSTRAINT room_uk UNIQUE ( room_number );

CREATE TABLE service (
    service_id   NUMBER(2) NOT NULL,
    service_name VARCHAR2(15) NOT NULL,
    price        NUMBER(4) NOT NULL,
    description  VARCHAR2(15)
)
LOGGING;

ALTER TABLE service
    ADD CONSTRAINT service_service_name_ck CHECK ( service_name IN ( 'cazino', 'fitness', 'restaurant', 'spa' ) );

ALTER TABLE service ADD CONSTRAINT service_price_ck CHECK ( price > 0 );

ALTER TABLE service ADD CONSTRAINT service_pk PRIMARY KEY ( service_id );

ALTER TABLE service ADD CONSTRAINT service_uk UNIQUE ( service_name );

ALTER TABLE bill
    ADD CONSTRAINT booking_bill_fk FOREIGN KEY ( reservation_id,
                                                 client_id,
                                                 room_id )
        REFERENCES booking ( reservation_id,
                             client_id,
                             room_id )
    NOT DEFERRABLE;

ALTER TABLE booking_service_fk
    ADD CONSTRAINT booking_service_fk_booking_fk FOREIGN KEY ( reservation_id,
                                                               client_id,
                                                               room_id )
        REFERENCES booking ( reservation_id,
                             client_id,
                             room_id )
    NOT DEFERRABLE;

ALTER TABLE booking_service_fk
    ADD CONSTRAINT booking_service_fk_service_fk FOREIGN KEY ( service_id )
        REFERENCES service ( service_id )
    NOT DEFERRABLE;

ALTER TABLE booking
    ADD CONSTRAINT client_booking_fk FOREIGN KEY ( client_id )
        REFERENCES client ( client_id )
    NOT DEFERRABLE;

ALTER TABLE bill
    ADD CONSTRAINT employee_bill_fk FOREIGN KEY ( employee_id )
        REFERENCES employee ( employee_id )
    NOT DEFERRABLE;

ALTER TABLE booking
    ADD CONSTRAINT room_booking_fk FOREIGN KEY ( room_id )
        REFERENCES room ( room_id )
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER Trg_Bill_employee_id 
    BEFORE INSERT OR UPDATE ON Bill 
    FOR EACH ROW 
DECLARE no_employees NUMBER;
BEGIN
    select COUNT(*) into no_employees 
    from employee e 
    where e.employee_id = :new.employee_id 
        and e.job not like '%receptie%';
	IF ( no_employees > 0) 
	THEN
		RAISE_APPLICATION_ERROR( -20001,
			'Acest angajat nu se ocupa de plati, nefiind un receptioner. ' );
	END IF;
END; 
/

CREATE OR REPLACE TRIGGER Trg_Bill_payment_date 
    BEFORE INSERT OR UPDATE ON Bill 
    FOR EACH ROW 
BEGIN
	IF (:new.payment_date > SYSDATE)
	THEN
		RAISE_APPLICATION_ERROR( -20001,
			'Data invalida : ' || TO_CHAR(:new.payment_date, 'DD.MM.YYYY HH24:MI:SS' ) || ' trebuie sa fie inainte de data curenta. ' );
	END IF;
END; 
/

CREATE OR REPLACE TRIGGER Trg_Booking_check_out_date 
    BEFORE INSERT OR UPDATE ON Booking 
    FOR EACH ROW 
BEGIN
	IF (:new.check_out_date <= :new.check_in_date)
        THEN
            RAISE_APPLICATION_ERROR(-20001,
                'Data invalida: ' || TO_CHAR(:new.check_out_date, 'DD.MM.YYYY HH24:MI:SS') || 
                ' trebuie sa fie mai dupa data de check-in, adica ' || 
                TO_CHAR(:new.check_in_date, 'DD.MM.YYYY HH24:MI:SS'));
        END IF;
END; 
/

CREATE OR REPLACE TRIGGER Trg_Booking_Insert_check_in_date 
    BEFORE INSERT ON Booking 
    FOR EACH ROW 
DECLARE
    conflicting_booking NUMBER;
BEGIN
       SELECT COUNT(*) INTO conflicting_booking
       FROM Booking b
       WHERE b.check_out_date IS NOT NULL
        AND b.check_out_date > :new.check_in_date
        AND b.room_id = :new.room_id;
        
	IF (:new.check_in_date <= SYSDATE OR conflicting_booking > 0)
	THEN
		RAISE_APPLICATION_ERROR( -20001,
			'Data invalida : ' || TO_CHAR(:new.check_in_date, 'DD.MM.YYYY HH24:MI:SS' ) || ' trebuie sa fie dupa data curenta si dupa incheierea altor rezervari. ' );
	END IF;
END; 
/

CREATE OR REPLACE TRIGGER Trg_Booking_reservation_date 
    BEFORE INSERT OR UPDATE ON Booking 
    FOR EACH ROW 
BEGIN
	IF (:new.reservation_date >= SYSDATE OR :new.reservation_date >= :new.check_in_date)
	THEN
		RAISE_APPLICATION_ERROR( -20001,
			'Data invalida : ' || TO_CHAR(:new.check_in_date, 'DD.MM.YYYY HH24:MI:SS' ) || ' trebuie sa fie mai devreme decat data curenta si decat data de check-in. ' );
	END IF;
END; 
/

CREATE OR REPLACE TRIGGER Trg_Booking_Update_check_in_date 
    FOR UPDATE OF check_in_date, check_out_date ON Booking 
COMPOUND TRIGGER

    -- Variables to store old and new values
    TYPE t_booking_row IS RECORD (
        check_in_date  DATE,
        check_out_date DATE,
        room_id        NUMBER
    );
    l_bookings t_booking_row;

BEFORE EACH ROW IS
BEGIN
    -- Store the relevant values before each row update
    l_bookings.check_in_date  := :NEW.check_in_date;
    l_bookings.check_out_date := :NEW.check_out_date;
    l_bookings.room_id        := :NEW.room_id;
END BEFORE EACH ROW;

AFTER EACH ROW IS
BEGIN
    -- Update the total room price after each row update
    UPDATE booking 
    SET room_total_price = (l_bookings.check_out_date - l_bookings.check_in_date) * 
                           (SELECT MAX(price) FROM room r WHERE r.room_id = l_bookings.room_id)
    WHERE reservation_id = :NEW.reservation_id;
END AFTER EACH ROW;

END; 
/

CREATE OR REPLACE TRIGGER Trg_Client_birth_date 
    BEFORE INSERT OR UPDATE ON Client 
    FOR EACH ROW 
BEGIN
	IF (:new.birth_date >= SYSDATE)
	THEN
		RAISE_APPLICATION_ERROR( -20001,
			'Data invalida : ' || TO_CHAR(:new.birth_date, 'DD.MM.YYYY HH24:MI:SS' ) || ' trebuie sa fie mai devreme decat data curenta.' );
	END IF;
END; 
/

CREATE OR REPLACE TRIGGER Trg_Employee_hire_date 
    BEFORE INSERT OR UPDATE ON Employee 
    FOR EACH ROW 
BEGIN
	IF (:new.hire_date > SYSDATE)
	THEN
		RAISE_APPLICATION_ERROR( -20001,
			'Data invalida : ' || TO_CHAR(:new.hire_date, 'DD.MM.YYYY HH24:MI:SS' ) || ' trebuie sa fie mai devreme decat data curenta. ' );
	END IF;
END; 
/

CREATE OR REPLACE TRIGGER Trg_Room_floor 
    BEFORE INSERT OR UPDATE ON Room 
    FOR EACH ROW 
BEGIN
	IF (:new.floor != FLOOR(:new.room_number / 100))
	THEN
		RAISE_APPLICATION_ERROR( -20001,
			'Ati gresit etajul. ' );
	END IF;
END; 
/

CREATE SEQUENCE booking_reservation_id_seq START WITH 100000 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER booking_reservation_id_trg BEFORE
    INSERT ON booking
    FOR EACH ROW
    WHEN ( new.reservation_id IS NULL )
BEGIN
    :new.reservation_id := booking_reservation_id_seq.nextval;
END;
/

CREATE SEQUENCE client_client_id_seq START WITH 10000 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER client_client_id_trg BEFORE
    INSERT ON client
    FOR EACH ROW
    WHEN ( new.client_id IS NULL )
BEGIN
    :new.client_id := client_client_id_seq.nextval;
END;
/

CREATE SEQUENCE employee_employee_id_seq START WITH 100 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER employee_employee_id_trg BEFORE
    INSERT ON employee
    FOR EACH ROW
    WHEN ( new.employee_id IS NULL )
BEGIN
    :new.employee_id := employee_employee_id_seq.nextval;
END;
/

CREATE SEQUENCE room_room_id_seq START WITH 1000 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER room_room_id_trg BEFORE
    INSERT ON room
    FOR EACH ROW
    WHEN ( new.room_id IS NULL )
BEGIN
    :new.room_id := room_room_id_seq.nextval;
END;
/

CREATE SEQUENCE service_service_id_seq START WITH 10 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER service_service_id_trg BEFORE
    INSERT ON service
    FOR EACH ROW
    WHEN ( new.service_id IS NULL )
BEGIN
    :new.service_id := service_service_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             7
-- CREATE INDEX                             1
-- ALTER TABLE                             35
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          14
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          5
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
